{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/chair/991.278.06.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "Chair\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/chair/002.110.88.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "Chair\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/chair/902.874.13.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "Chair\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/chair/003.015.26.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "Chair\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/bed/802.312.28.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "Bed\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/bed/802.480.21.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "Bed\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/bed/902.290.17.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "Bed\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/bed/202.692.43.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "Bed\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/bed/901.963.14.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "Bed\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/couch/803.007.16.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "couch\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/couch/990.203.58.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "couch\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/couch/902.651.09.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "Bed\n",
      "/Users/sevara/Desktop/ai_datasets/ikea-master /testt/couch/802.991.95.jpg\n",
      "[[255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " ...\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]\n",
      " [255 255 255 ... 255 255 255]]\n",
      "couch\n",
      "[[41 42 44 ... 24 17 14]\n",
      " [43 43 41 ... 21 22 23]\n",
      " [45 46 44 ... 42 28 27]\n",
      " ...\n",
      " [32 31 33 ... 40 42 42]\n",
      " [32 31 33 ... 39 42 43]\n",
      " [32 32 35 ... 41 42 42]]\n",
      "Dining table\n",
      "[[49 44 42 ... 57 57 58]\n",
      " [58 53 49 ... 56 57 60]\n",
      " [52 49 46 ... 57 58 60]\n",
      " ...\n",
      " [39 42 40 ... 44 49 50]\n",
      " [40 42 40 ... 44 47 48]\n",
      " [38 40 38 ... 48 47 47]]\n",
      "Clock\n",
      "[[39 45 45 ... 38 38 34]\n",
      " [42 41 47 ... 20 29 31]\n",
      " [43 41 47 ... 17 22 23]\n",
      " ...\n",
      " [39 38 39 ... 49 48 49]\n",
      " [39 37 38 ... 48 48 52]\n",
      " [38 37 38 ... 46 46 50]]\n",
      "Clock\n",
      "[[43 38 37 ... 69 77 74]\n",
      " [41 42 45 ... 72 76 71]\n",
      " [42 44 46 ... 69 75 74]\n",
      " ...\n",
      " [37 36 39 ... 24 30 33]\n",
      " [38 37 40 ... 25 34 36]\n",
      " [39 36 39 ... 25 35 34]]\n",
      "Clock\n",
      "[[35 37 37 ... 42 42 41]\n",
      " [36 36 37 ... 41 40 41]\n",
      " [36 38 38 ... 41 40 41]\n",
      " ...\n",
      " [28 30 32 ... 34 39 63]\n",
      " [27 31 33 ... 26 24 32]\n",
      " [29 33 34 ... 25 28 27]]\n",
      "Bed\n",
      "[[46 48 49 ... 72 72 76]\n",
      " [44 43 44 ... 65 64 63]\n",
      " [44 42 44 ... 51 47 45]\n",
      " ...\n",
      " [37 37 39 ... 45 41 44]\n",
      " [36 36 38 ... 47 44 48]\n",
      " [37 36 38 ... 46 43 47]]\n",
      "Bed\n",
      "[[49 47 47 ... 11 13 12]\n",
      " [47 51 55 ... 11 12 10]\n",
      " [50 50 49 ... 11 11  9]\n",
      " ...\n",
      " [40 39 41 ... 45 46 45]\n",
      " [36 35 39 ... 45 46 47]\n",
      " [39 37 44 ... 36 38 39]]\n",
      "Bed\n",
      "[[50 50 53 ... 14 12 11]\n",
      " [53 56 57 ... 14 14 14]\n",
      " [53 54 53 ... 15 15 15]\n",
      " ...\n",
      " [41 41 45 ... 40 40 41]\n",
      " [39 42 43 ... 47 47 47]\n",
      " [38 43 44 ... 42 43 44]]\n",
      "Bed\n",
      "[[ 55  56  48 ...  13  10  13]\n",
      " [ 44  50  53 ...   7   9  10]\n",
      " [ 48  53  56 ...   5  18  20]\n",
      " ...\n",
      " [ 49  48  48 ... 181 180 179]\n",
      " [ 50  45  42 ... 179 179 179]\n",
      " [ 53  49  46 ... 178 178 179]]\n",
      "Dining table\n",
      "[[ 59  57  63 ...   9  12   9]\n",
      " [ 58  57  59 ...  11  12  11]\n",
      " [ 58  53  52 ...   9   9   9]\n",
      " ...\n",
      " [ 44  45  47 ...  93 101  98]\n",
      " [ 42  44  48 ...  91 102  99]\n",
      " [ 44  44  49 ...  88 102  98]]\n",
      "Dining table\n",
      "[[54 53 63 ... 88 84 89]\n",
      " [57 54 61 ... 86 87 94]\n",
      " [57 55 60 ... 95 94 95]\n",
      " ...\n",
      " [43 46 43 ... 61 59 61]\n",
      " [42 44 43 ... 63 64 65]\n",
      " [41 44 45 ... 61 68 66]]\n",
      "Clock\n",
      "[[46 40 48 ... 31 21 25]\n",
      " [50 46 49 ... 26 22 21]\n",
      " [48 48 50 ... 24 31 33]\n",
      " ...\n",
      " [41 41 41 ... 39 38 35]\n",
      " [41 41 42 ... 37 35 33]\n",
      " [40 41 42 ... 36 36 36]]\n",
      "Clock\n",
      "[[ 52  56  60 ... 203 202 202]\n",
      " [ 57  61  64 ... 204 203 203]\n",
      " [ 56  55  55 ... 204 204 204]\n",
      " ...\n",
      " [ 49  48  48 ...  81  77  77]\n",
      " [ 48  46  43 ...  76  77  78]\n",
      " [ 51  49  43 ...  74  77  75]]\n",
      "Clock\n",
      "[[ 68  74  75 ... 176 176 175]\n",
      " [ 69  65  70 ... 176 175 175]\n",
      " [ 66  61  64 ... 176 175 174]\n",
      " ...\n",
      " [ 52  54  61 ...  97  95  89]\n",
      " [ 54  50  51 ...  96  96  93]\n",
      " [ 57  53  52 ...  93  90  96]]\n",
      "Clock\n"
     ]
    }
   ],
   "source": [
    "import PySimpleGUI as sg\n",
    "import os.path\n",
    "from PIL import Image, ImageTk\n",
    "import io\n",
    "from tensorflow import keras\n",
    "import tensorflow as tf\n",
    "import cv2\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "from tqdm import tqdm\n",
    "IMG_SIZE = 32\n",
    "frameSize = (550,300)\n",
    "\n",
    "CATEGORIES = [\"Clock\", \"Bed\",\"Chair\",\"Dining table\",\"Plant_pot\",\"Couch\"]\n",
    "instruction=[   \n",
    "        [sg.Text(\"In order to UPLOAD photo of your room click \\\"Browse\\\" button and choose directory\")],\n",
    "        [sg.Text(\"In order to TAKE REAL-TIME photo of your room click \\\"Stream\\\" button\")]]\n",
    "file_list_column = [\n",
    "        [sg.Text(\"Image Folder\"),\n",
    "        sg.In(size=(25, 1), enable_events=True, key=\"-FOLDER-\"),\n",
    "        sg.FolderBrowse(),\n",
    "        sg.Button(\"Stream\")],\n",
    "    [sg.Listbox(values=[], enable_events=True, size=(40, 20), key=\"-FILE LIST-\")],]\n",
    "image_viewer_column = [\n",
    "    [sg.Text(\"Choose an image from list on left:\")],\n",
    "    [sg.Text(size=(40, 1), key=\"-TOUT-\")],\n",
    "    [sg.Image(key=\"-IMAGE-\")],]\n",
    "predict_view=[\n",
    "    [sg.Text(\"Type of the furniture on photo:\",font=(\"Helvetica\", 25))],\n",
    "    [sg.Text(size=(40, 1),font=(\"Helvetica\", 25), key=\"-PRED-\")],]\n",
    "sg.theme('LightBrown11')\n",
    "\n",
    "layout = [[sg.Column(instruction)],\n",
    "    [sg.Column(file_list_column),\n",
    "     sg.VSeperator(),\n",
    "     sg.Column(image_viewer_column),],\n",
    "     [sg.Column(predict_view),]\n",
    "    ]\n",
    "\n",
    "# Create the window\n",
    "window = sg.Window(\"Virtual Designer\", layout, size=(1200,800))\n",
    "model = tf.keras.models.load_model(\"furniture.model\")\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "# Create an event loop\n",
    "while True:\n",
    "    event, values = window.read()\n",
    "    if event == \"Exit\" or event == sg.WIN_CLOSED:\n",
    "         break\n",
    "    if event==\"Stream\":\n",
    "        ret, frameOr = cap.read()\n",
    "        frame=cv2.resize(frameOr, frameSize)\n",
    "        cv2.imwrite(\"stream.jpg\",frame)\n",
    "        imgbytes = cv2.imencode(\".png\", frame)[1].tobytes()\n",
    "        window[\"-IMAGE-\"].update(data=imgbytes)\n",
    "        model_out = model.predict(prepare(\"stream.jpg\"))\n",
    "        if np.argmax(model_out) == 0: \n",
    "            str_label='Clock'\n",
    "        if np.argmax(model_out) == 1:  \n",
    "            str_label='Bed'\n",
    "        if np.argmax(model_out) == 2:  \n",
    "            str_label='Chair'\n",
    "        if np.argmax(model_out) == 3:  \n",
    "            str_label='Dining table'\n",
    "        if np.argmax(model_out) == 4 :  \n",
    "            str_label='Plant_pot'\n",
    "        if np.argmax(model_out) == 5 :  \n",
    "            str_label='Couch'\n",
    "        print(str_label)\n",
    "        window[\"-PRED-\"].update(str_label)\n",
    "        \n",
    "    if event == \"-FOLDER-\":\n",
    "        folder = values[\"-FOLDER-\"]\n",
    "        try:\n",
    "        # Get list of files in folder\n",
    "            file_list = os.listdir(folder)\n",
    "        except:\n",
    "            file_list = []\n",
    "        fnames = [\n",
    "            f\n",
    "            for f in file_list\n",
    "            if os.path.isfile(os.path.join(folder, f))\n",
    "            and f.lower().endswith((\".png\", \".gif\", \".jpg\"))\n",
    "        ]\n",
    "        window[\"-FILE LIST-\"].update(fnames)    \n",
    "        \n",
    "    elif event == \"-FILE LIST-\":  # A file was chosen from the listbox\n",
    "        try:\n",
    "            filename = os.path.join(\n",
    "                values[\"-FOLDER-\"], values[\"-FILE LIST-\"][0]\n",
    "        )\n",
    "            data=get_img_data(filename, first=True)\n",
    "            window[\"-TOUT-\"].update(filename)\n",
    "            window[\"-IMAGE-\"].update(data=data)\n",
    "            print(filename)\n",
    "            model_out = model.predict([prepare(filename)])\n",
    "            if np.argmax(model_out) == 0: \n",
    "                str_label='Clock'\n",
    "            if np.argmax(model_out) == 1:  \n",
    "                str_label='Bed'\n",
    "            if np.argmax(model_out) == 2:  \n",
    "                str_label='Chair'\n",
    "            if np.argmax(model_out) == 3:  \n",
    "                str_label='Dining table'\n",
    "            if np.argmax(model_out) == 4 :  \n",
    "                str_label='plant_pot'\n",
    "            if np.argmax(model_out) == 5 :  \n",
    "                str_label='couch'\n",
    "            print(str_label)\n",
    "            window[\"-PRED-\"].update(str_label)\n",
    "        except:\n",
    "            pass\n",
    "window.close()\n",
    "\n",
    "def prepare(filepath):\n",
    "    IMG_SIZE = 32  # 50 in txt-based\n",
    "    img_array = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)  # read in the image, convert to grayscale\n",
    "    new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  # resize image to match model's expected sizing\n",
    "    print(img_array)\n",
    "    return new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 1)  \n",
    "\n",
    "def get_img_data(f, maxsize = (1200, 850), first = False):\n",
    "    \"\"\"Generate image data using PIL\n",
    "    \"\"\"\n",
    "    img = Image.open(f)\n",
    "    img.thumbnail(maxsize)\n",
    "    if first:                     # tkinter is inactive the first time\n",
    "        bio = io.BytesIO()\n",
    "        img.save(bio, format = \"PNG\")\n",
    "        del img\n",
    "        return bio.getvalue()\n",
    "    return ImageTk.PhotoImage(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
